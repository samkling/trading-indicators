//@version=5
// indicator("SamK_Indicator", shorttitle="SK", overlay=true, timeframe="", timeframe_gaps=true)
indicator("SamK_Indicator", shorttitle="SK", overlay=true)

ma(source, length, type) =>
    type == "SMA" ? ta.sma(source, length) :
     type == "EMA" ? ta.ema(source, length) :
     type == "SMMA (RMA)" ? ta.rma(source, length) :
     type == "WMA" ? ta.wma(source, length) :
     type == "VWMA" ? ta.vwma(source, length) :
     na

displayIndicators = "Display Indicators"
allMas_group = "All Timeframe MAs"
dmas_group = "Daily MAs"
indicators = "Indicators"

showChillax = input.bool(false, "Show Chillax", group = displayIndicators, inline = "row1") and (timeframe.isdaily or timeframe.isweekly)
only20ema = input.bool(false, "Only 20ema", group = displayIndicators, inline = "row1")
excludeDailyIntraday = input.bool(true, "Exclude Daily Intraday", group = dmas_group, inline = "row2")
showBB_SP = input.bool(false, "Show BB SP", group = indicators, inline = "row1") and timeframe.isdaily
showADR = input.bool(true, "Show ADR", group = indicators, inline = "row1") and (timeframe.isdaily or timeframe.isweekly)
screenshot = input.bool(false, "Screenshot", group = indicators, inline = "row1") and (timeframe.isdaily or timeframe.isweekly or timeframe.ismonthly)
p_color_input = input.bool(true,"Dark Pivots?", group = displayIndicators, inline = "row3")

showMAs = input.bool(true, "Show MAs All TF", group = allMas_group, inline = "50_200") and (not only20ema) and (not showBB_SP)
showDMAs = input.bool(false, "Show Daily MAs", group = dmas_group, inline = "row2") and (timeframe.isintraday or (not showMAs and timeframe.isdaily)) and (not only20ema) and (not excludeDailyIntraday) and (not showBB_SP)

show_50 = (input.bool(false, "Show 50sma", group = allMas_group, inline ="50_200" ) and (not only20ema) and (showMAs) and (timeframe.isdaily or timeframe.isweekly) ) or screenshot
show_100 = (input.bool(false, "Show 100sma", group = allMas_group, inline ="50_200" ) and (not only20ema) and (showMAs) and (timeframe.isdaily or timeframe.isweekly)) or screenshot
show_200 = (input.bool(false, "Show 200sma", group = allMas_group, inline ="50_200" ) and (not only20ema) and (showMAs) and (timeframe.isdaily or timeframe.isweekly)) or screenshot

showOops = input.bool(true, "Show Oops", group = displayIndicators, inline ="oops") and timeframe.isdaily
showOopsFail = input.bool(false, "Show Oops Fail", group = displayIndicators, inline ="oops") and timeframe.isdaily
showQQQ20 = input.bool(false, "Show QQQ20", group = displayIndicators, inline = "row1") and (timeframe.isdaily)
showRSI = input.bool(false, "Show W RSI", group = indicators, inline="RSI") and timeframe.isdaily


show_ma1_day   = input(true   , "MA Day №1", inline="MA Day #1", group = dmas_group) and showDMAs
ma1_day_type   = input.string("EMA"  , ""     , inline="MA Day #1", options=["SMA", "EMA", "SMMA (RMA)", "WMA", "VWMA"], group = dmas_group)
ma1_day_source = request.security(syminfo.ticker,"D",close)
ma1_day_length = input.int(10     , ""     , inline="MA Day #1", minval=1, group = dmas_group)
ma1_day_color  = input(color.fuchsia, ""     , inline="MA Day #1", group = dmas_group)
// ma1_day = ma(ma1_day_source, ma1_day_length, ma1_day_type)
ma1_day = request.security(syminfo.tickerid, "D", ma(ma1_day_source, ma1_day_length, ma1_day_type),lookahead = barmerge.lookahead_off, gaps=barmerge.gaps_on)
plot(show_ma1_day ? ma1_day : na, color = ma1_day_color, title="MA Day №1", linewidth = 2)

show_ma2_day   = input(true   , "MA Day №2", inline="MA Day №2", group = dmas_group) and showDMAs or (only20ema and not excludeDailyIntraday)
ma2_day_type   = input.string("EMA"  , ""     , inline="MA Day №2", options=["SMA", "EMA", "SMMA (RMA)", "WMA", "VWMA"], group = dmas_group)
ma2_day_source = request.security(syminfo.ticker,"D",close)
ma2_day_length = input.int(20     , ""     , inline="MA Day №2", minval=1, group = dmas_group)
ma2_day_color  = input(color.yellow, ""     , inline="MA Day №2", group = dmas_group)
// ma2_day = ma(ma2_day_source, ma2_day_length, ma2_day_type)
ma2_day = request.security(syminfo.tickerid, "D", ma(ma2_day_source, ma2_day_length, ma2_day_type),lookahead = barmerge.lookahead_off, gaps=barmerge.gaps_on)
plot(show_ma2_day ? ma2_day : na, color = ma2_day_color, title="MA Day №2", linewidth = 2)

// ma_type = input.string("EMA", title = "SMA?", options=["SMA", "EMA"], group = allMas_group)

show_ma1   = input(true   , "MA №1", inline="MA #1", group = allMas_group) and showMAs
ma1_type   = input.string("EMA"  , ""     , inline="MA #1", options=["SMA", "EMA", "SMMA (RMA)", "WMA", "VWMA"], group = allMas_group)
ma1_source = input(close  , ""     , inline="MA #1", group = allMas_group)
ma1_length = input.int(10     , ""     , inline="MA #1", minval=1, group = allMas_group)
ma1_color  = input(color.fuchsia, ""     , inline="MA #1", group = allMas_group)
ma1 = ma(ma1_source, ma1_length, ma1_type)
plot(show_ma1 ? ma1 : na, color = ma1_color, title="MA №1", linewidth = 2)

show_ma2   = input(true   , "MA №2", inline="MA #2", group = allMas_group) and showMAs or only20ema
ma2_type   = input.string("EMA"  , ""     , inline="MA #2", options=["SMA", "EMA", "SMMA (RMA)", "WMA", "VWMA"], group = allMas_group)
ma2_source = input(close  , ""     , inline="MA #2", group = allMas_group)
ma2_length = input.int(20     , ""     , inline="MA #2", minval=1, group = allMas_group)
ma2_color  = input(color.yellow, ""     , inline="MA #2", group = allMas_group)
ma2 = ma(ma2_source, ma2_length, ma2_type)
plot(show_ma2 ? ma2 : na, color = ma2_color, title="MA №2", linewidth = 2)

show_ma3   = showMAs and show_50
ma3_type   = "SMA"
ma3_source = close
ma3_length = 50
ma3_color  = color.aqua
ma3 = ma(ma3_source, ma3_length, ma3_type)
plot(show_ma3 ? ma3 : na, color = ma3_color, title="MA №3", linewidth = 2)

show_ma4   = showMAs and show_200
ma4_type = "SMA"
ma4_source = close
ma4_length = 200
ma4_color  = color.red
ma4 = ma(ma4_source, ma4_length, ma4_type)
plot(show_ma4 ? ma4 : na, color = ma4_color, title="MA №4", linewidth = 2)

show_ma5   = showMAs and show_100
ma5_type = "SMA"
ma5_source = close
ma5_length = 100
ma5_color  = color.green
ma5 = ma(ma5_source, ma5_length, ma5_type)
plot(show_ma5 ? ma5 : na, color = ma5_color, title="MA №5", linewidth = 2)

qqqPrice = request.security("QQQ", "D", close)
plotQQQ20 = showQQQ20 and (ta.ema(qqqPrice,20) < qqqPrice)
plotQ20I = (ta.ema(qqqPrice,20) < qqqPrice)
// plotshape(plotQQQ20, style = shape.square, color = color.rgb(30, 18, 204), location = location.bottom)

// below10 = ta.ema(close, 10) > open and plotQQQ20
// below10 = true

oopsReversal = (low[1] > open) and (high > low[1]) and showOops
oopsFail = (low[1] > open) and (high > low[1]) and (close < low[1]) and showOopsFail
plotshape(oopsReversal, style=shape.triangleup, location = location.bottom, color=color.lime)
plotshape(oopsFail, style=shape.xcross, location = location.bottom, color=color.red)

w_rsi = ta.rsi(close,14)
rsi_input = input.int(65, "RSI threshold", group = indicators, inline="RSI")
w = request.security(syminfo.ticker, "W", w_rsi)
plot_rsi = w > rsi_input and showRSI
plotshape(plot_rsi, style=shape.arrowup, location = location.bottom, color = color.gray, size = size.small)

plot(show_ma2 ? ma2 : na, color = plotQQQ20 ? color.green : color.yellow, title="MA №2", linewidth = 2)
plot(show_ma2_day ? ma2_day : na, color = plotQ20I ? color.yellow : color.yellow, title="MA Day №2", linewidth = 2)


length = 20
src1 = close
stdDev_1 = 1.0
stdDev_2 = 2.0
basis = ta.sma(src1, length)
dev_1 = stdDev_1 * ta.stdev(src1, length)
dev_2 = stdDev_2 * ta.stdev(src1, length)
upper_1 = basis + dev_1
upper_2 = basis + dev_2
lower_1 = basis - dev_1
lower_2 = basis - dev_2
offset = 0

// plot(basis, "Basis", color=#FF6D00, offset = offset)
plot(showBB_SP ? upper_1 : na, "Upper_1", color=color.blue, offset = offset,linewidth = 3)
plot(showBB_SP ? upper_2 : na, "Upper_2", color=color.gray, offset = offset)
plot(showBB_SP ? lower_1 : na, "Lower_1", color=color.blue, offset = offset,linewidth = 3)
plot(showBB_SP ? lower_2 : na, "Upper_2", color=color.gray, offset = offset)


// We use `var` to only initialize the table on the first bar.
var table atrDisplay = table.new(position.top_right,3,2)
// We call `ta.atr()` outside the `if` block so it executes on each bar.
// myAtr = math.round((ta.atr(14) / close)* 1000)/10
Length = (20)
dhigh = request.security(syminfo.tickerid, "D", high)
dlow = request.security(syminfo.tickerid, "D", low)
myAtr = 100 * (ta.sma(dhigh / dlow, Length) - 1)
avgVol = ma(volume, 50, "SMA")
rVol = volume/avgVol
myAtr2 = ta.atr(14)

ndPivot = (high+low+close) / 3
ndR1 = (ndPivot * 2) - low

if barstate.islast and showADR
    // We only populate the table on the last bar.
    table.cell(atrDisplay, 2, 1, "ADR: " + str.tostring(myAtr,"0.00") + "%",text_color = myAtr > 3.4 ? color.lime : color.red)
if showADR
    table.cell(atrDisplay, 1, 0, "V: " + str.tostring(volume/1000000,"0.00") + "m",text_color = close > close[1] ? color.lime : color.red)
    table.cell(atrDisplay, 2, 0, "VAv: " + str.tostring(avgVol/1000000,"0.00") + "m",text_color = color.yellow)
    // table.cell(atrDisplay, 1, 1, "Rv: " + str.tostring(rVol,"0.0"),text_color = rVol > 1 ? color.lime : p_color_input ? color.gray : color.rgb(77, 79, 84))
    table.cell(atrDisplay, 1, 1, "nR1: " + str.tostring(ndR1,"0.00"),text_color = color.orange)
    table.cell(atrDisplay, 0,0, "ATR: " + str.tostring(myAtr2, "0.00"))

// yourmama = input.string(title='', options=['SMA', 'EMA'], defval='SMA', group='Moving Averages Type')

// ma(ma1_day_source, ma1_day_length, ma1_day_type)
//chillax

chillax = 'Chillax Settings'

ma1cl = input(10, title="First MA length", group = chillax, inline="row1")
src1cl = close
out1 = timeframe.isdaily ? ma(src1cl, ma1cl,'SMA') : timeframe.isweekly ? ma(src1cl, ma1cl,'EMA') : na

ma2cl = input(20, title="Second MA length", group = chillax, inline = "row1")
src2 = close
out2 = timeframe.isdaily ? ma(src2, ma2cl,'SMA') : timeframe.isweekly ? ma(src2, ma2cl,'EMA') : na


// plot(out1, color=color.red)
// plot(out2, color=color.black)

// the number of bars to determine uptrend, if trendlen is 5, and if today's ma is higher than 5 days ago's ma, then it is an uptrend
trendlen = input(5, title="number of bars to determine uptrend", group = chillax, inline = "row2")


over = out1 > out2 
out1up = out1 > out1[trendlen]
out2up = out2 > out2[trendlen] 

green = out1 > out2 and out1up and out2up
lightgreen = out1 > out2 and out1up and not out2up
yellow = out1 > out2 and not out1up and not out2up

bgColor = showChillax ? (green ? color.new(color.rgb(0, 150, 0), 50) : lightgreen ? color.new(color.rgb(0, 255, 0), 80) : yellow ? color.new(color.yellow, 80) : na) : na
   
bgcolor(color=bgColor)


// PIVOTS 

DAILY = "Daily"

TRADITIONAL = "Traditional"

kind = TRADITIONAL
pivot_time_frame = DAILY
showPivots = input.bool(true,"Show Pivots -", group = displayIndicators, inline = "row3") and timeframe.isminutes
look_back = input.int(title="# of days", defval=100, minval=1, maxval=5000, group = displayIndicators, inline = "row3")
is_daily_based = true
show_labels = false
show_prices = false
position_labels = "Left"
line_width = 1

showPPs = timeframe.isminutes
hideOthers = true
ppThickness = 3


var DEF_COLOR = #FB8C00
var arr_time = array.new_int()
var p = array.new_float()
// p_color_input = input.bool(true,"Dark Pivots?", group = displayIndicators, inline = "row3")
p_color = p_color_input ? color.gray : color.rgb(77, 79, 84)
p_show = true
var r1 = array.new_float()
var s1 = array.new_float()
s1_color = color.aqua
s1_show = true
r1_color = color.orange
r1_show = true 
var r2 = array.new_float()
var s2 = array.new_float()
s2_color = color.blue
s2_show = true
r2_color = color.red
r2_show = true

pivotX_open = float(na)
pivotX_open := nz(pivotX_open[1], open)
pivotX_high = float(na)
pivotX_high := nz(pivotX_high[1], high)
pivotX_low = float(na)
pivotX_low := nz(pivotX_low[1], low)
pivotX_prev_open = float(na)
pivotX_prev_open := nz(pivotX_prev_open[1])
pivotX_prev_high = float(na)
pivotX_prev_high := nz(pivotX_prev_high[1])
pivotX_prev_low = float(na)
pivotX_prev_low := nz(pivotX_prev_low[1])
pivotX_prev_close = float(na)
pivotX_prev_close := nz(pivotX_prev_close[1])

get_pivot_resolution() =>
    resolution = "D"
    resolution

var lines = array.new_line()
var labels = array.new_label()

draw_line(i, pivot, col) =>
    if array.size(arr_time) > 1
        array.push(lines, line.new(array.get(arr_time, i), array.get(pivot, i), array.get(arr_time, i + 1), array.get(pivot, i), color=col, xloc=xloc.bar_time, width=ppThickness))

draw_label(i, y, txt, txt_color) =>
    if (show_labels or show_prices) and not na(y)
        display_text = (show_labels ? txt : "") + (show_prices ? str.format(" ({0})", math.round_to_mintick(y)) : "")
        label_style = position_labels == "Left" ? label.style_label_right : label.style_label_left
        x = position_labels == "Left" ? array.get(arr_time, i) : array.get(arr_time, i + 1)
        array.push(labels, label.new(x = x, y=y, text=display_text, textcolor=txt_color, style=label_style, color=#00000000, xloc=xloc.bar_time))

traditional() =>
    pivotX_Median = (pivotX_prev_high + pivotX_prev_low + pivotX_prev_close) / 3
    array.push(p, pivotX_Median)
    array.push(r1, pivotX_Median * 2 - pivotX_prev_low)
    array.push(s1, pivotX_Median * 2 - pivotX_prev_high)
    array.push(r2, pivotX_Median + 1 * (pivotX_prev_high - pivotX_prev_low))
    array.push(s2, pivotX_Median - 1 * (pivotX_prev_high - pivotX_prev_low))

calc_pivot() =>
    if kind == TRADITIONAL
        traditional()

resolution = get_pivot_resolution()

SIMPLE_DIVISOR = -1
custom_years_divisor = SIMPLE_DIVISOR

calc_high(prev, curr) =>
    if na(prev) or na(curr)
        nz(prev, nz(curr, na))
    else
        math.max(prev, curr)
    
calc_low(prev, curr) =>
    if not na(prev) and not na(curr)
        math.min(prev, curr)
    else
        nz(prev, nz(curr, na))

calc_OHLC_for_pivot(custom_years_divisor) =>
    if custom_years_divisor == SIMPLE_DIVISOR 
        [open, high, low, close, open[1], high[1], low[1], close[1], time[1], time_close]
    else
        var prev_sec_open = float(na)
        var prev_sec_high = float(na)
        var prev_sec_low = float(na)
        var prev_sec_close = float(na)
        var prev_sec_time = int(na)
        var curr_sec_open = float(na)
        var curr_sec_high = float(na)
        var curr_sec_low = float(na)
        var curr_sec_close = float(na)
        if year(time_close) % custom_years_divisor == 0
        	curr_sec_open := open
			curr_sec_high := high
			curr_sec_low := low
			curr_sec_close := close
            prev_sec_high := high[1]
            prev_sec_low := low[1]
            prev_sec_close := close[1]
            prev_sec_time := time[1]
            for i = 2 to custom_years_divisor
                prev_sec_open :=  nz(open[i], prev_sec_open)
                prev_sec_high := calc_high(prev_sec_high, high[i])
                prev_sec_low := calc_low(prev_sec_low, low[i])
                prev_sec_time := nz(time[i], prev_sec_time)
        [curr_sec_open, curr_sec_high, curr_sec_low, curr_sec_close, prev_sec_open, prev_sec_high, prev_sec_low, prev_sec_close, prev_sec_time, time_close]


[sec_open, sec_high, sec_low, sec_close, prev_sec_open, prev_sec_high, prev_sec_low, prev_sec_close, prev_sec_time, sec_time] = request.security(syminfo.tickerid, resolution, calc_OHLC_for_pivot(custom_years_divisor), lookahead = barmerge.lookahead_on)
sec_open_gaps_on = request.security(syminfo.tickerid, resolution, open, gaps = barmerge.gaps_on, lookahead = barmerge.lookahead_on)

if showPivots
    is_change_years = false
    // is_change_years = custom_years_divisor > 0 and ta.change(time(resolution)) != 0 and year(time_close) % custom_years_divisor == 0

    var is_change = false
    var uses_current_bar = false
    var change_time = int(na)
    is_time_change = false
    if is_time_change
        change_time := time

    var start_time = time
    var was_last_premarket = false
    var start_calculate_in_premarket = false

    is_last_premarket = barstate.islast and session.ispremarket and time_close > sec_time and not was_last_premarket

    if is_last_premarket
        was_last_premarket := true
        start_calculate_in_premarket := true
    if session.ismarket
        was_last_premarket := false
        
    without_time_change = barstate.islast and array.size(arr_time) == 0
    is_can_calc_pivot = (not uses_current_bar and is_time_change and session.ismarket) or (ta.change(sec_open) and not start_calculate_in_premarket) or is_last_premarket or (uses_current_bar and not na(sec_open_gaps_on)) or without_time_change
    enough_bars_for_calculate = prev_sec_time >= start_time or is_daily_based

    if is_can_calc_pivot and enough_bars_for_calculate
        if array.size(arr_time) == 0 and is_daily_based
            pivotX_prev_open := prev_sec_open[1]
            pivotX_prev_high := prev_sec_high[1]
            pivotX_prev_low := prev_sec_low[1]
            pivotX_prev_close := prev_sec_close[1]
            pivotX_open := sec_open[1]
            pivotX_high := sec_high[1]
            pivotX_low := sec_low[1]
            array.push(arr_time, start_time)
            calc_pivot()
        
        if is_daily_based
            if is_last_premarket
                pivotX_prev_open := sec_open
                pivotX_prev_high := sec_high
                pivotX_prev_low := sec_low
                pivotX_prev_close := sec_close
                pivotX_open := open
                pivotX_high := high
                pivotX_low := low
            else
                pivotX_prev_open := prev_sec_open
                pivotX_prev_high := prev_sec_high
                pivotX_prev_low := prev_sec_low
                pivotX_prev_close := prev_sec_close
                pivotX_open := sec_open
                pivotX_high := sec_high
                pivotX_low := sec_low
        else
            pivotX_prev_high := pivotX_high
            pivotX_prev_low := pivotX_low
            pivotX_prev_open := pivotX_open
            pivotX_prev_close := close[1]
            pivotX_open := open
            pivotX_high := high
            pivotX_low := low

        if barstate.islast and not is_change and array.size(arr_time) > 0 and not without_time_change
            array.set(arr_time, array.size(arr_time) - 1, change_time)
        else if without_time_change
            array.push(arr_time, start_time)
        else
            array.push(arr_time, nz(change_time, time))

        calc_pivot()

        if array.size(arr_time) > look_back
            if array.size(arr_time) > 0
                array.shift(arr_time)
            if array.size(p) > 0 and p_show
                array.shift(p)
            if array.size(r1) > 0 and r1_show
                array.shift(r1)
            if array.size(s1) > 0 and s1_show
                array.shift(s1)
            if array.size(r2) > 0 and r2_show
                array.shift(r2)
            if array.size(s2) > 0 and s2_show
                array.shift(s2)
        is_change := true
    else if not is_daily_based
        pivotX_high := math.max(pivotX_high, high)
        pivotX_low := math.min(pivotX_low, low)

    if barstate.islast and not is_daily_based and array.size(arr_time) == 0 
        runtime.error("Not enough intraday data to calculate Pivot Points. Lower the Pivots Timeframe or turn on the 'Use Daily-based Values' option in the indicator settings.")

    if barstate.islast and array.size(arr_time) > 0 and is_change
        is_change := false
        if custom_years_divisor > 0
            last_pivot_time = array.get(arr_time, array.size(arr_time) - 1)
            pivot_timeframe = str.tostring(12 * custom_years_divisor) + "M"
            estimate_pivot_time = last_pivot_time + timeframe.in_seconds(pivot_timeframe) * 1000
            array.push(arr_time, estimate_pivot_time)
        else
            array.push(arr_time, time_close(resolution))

        for i = 0 to array.size(lines) - 1
            if array.size(lines) > 0
                line.delete(array.shift(lines))
            if array.size(labels) > 0
                label.delete(array.shift(labels))

        for i = 0 to array.size(arr_time) - 2
            if array.size(p) > 0 and p_show
                draw_line(i, p, p_color)
                draw_label(i, array.get(p, i), "P", p_color)
            if array.size(r1) > 0 and r1_show
                draw_line(i, r1, r1_color)
                draw_label(i, array.get(r1, i), "R1", r1_color)
            if array.size(s1) > 0 and s1_show
                draw_line(i, s1, s1_color)
                draw_label(i, array.get(s1, i), "S1", s1_color)
            if array.size(r2) > 0 and r2_show
                draw_line(i, r2, r2_color)
                draw_label(i, array.get(r2, i), "R2", r2_color)
            if array.size(s2) > 0 and s2_show
                draw_line(i, s2, s2_color)
                draw_label(i, array.get(s2, i), "S2", s2_color)


